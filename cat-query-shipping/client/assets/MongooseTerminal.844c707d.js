import{_ as a}from"./index.7ebf2df5.js";import{r as t,o as r,d as o,a9 as d}from"./vendor.d42da21d.js";const i={setup(){return{state:t({})}}},n={class:"row letter-head flex-column align-items-center p-4"},s=d('<h3 class="col-12 text-warning darken-40 text-center" data-v-69e9213a> Search the Shipment Database using a &#39;Mongo&#39; filter object </h3><div class="line-break w-75" data-v-69e9213a></div><h5 class="col-12 text-warning darken-40 text-start" data-v-69e9213a> What is a filter object? </h5><p class="col-11" data-v-69e9213a> The C.U.P.S Central Processing Matrix Server Appliance (CUPSCPMSA) allows for a user to submit a formatted object to search the lost shipment database instead of a query url. this object will can be formatted in such a way to have matching <kbd data-v-69e9213a>key</kbd> and <kbd data-v-69e9213a>value</kbd> pairs with shipments in the database. Here is an example <em data-v-69e9213a>(fig.a)</em></p><div class="col-11" data-v-69e9213a><em class="text-warning darken-40" data-v-69e9213a>figure a.</em><div class="row border border-secondary rounded p-2" data-v-69e9213a><p class="col-12" data-v-69e9213a> For this example, let&#39;s imagine we are searching for a shimpent sent to one <code data-v-69e9213a>Mayor Snibblysmith</code>. We format our object with the property (key): <kbd data-v-69e9213a>recipient</kbd> and the value: <kbd data-v-69e9213a>Mayor Snibblysmith</kbd>. </p><em class="col-11 text-danger lighten-10" data-v-69e9213a>filter object</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> const query = { recipient: &quot;Mayor Snibblysmith&quot; } </div><em class="col-11 text-danger lighten-10 mt-2" data-v-69e9213a>shipment in database</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> {<br data-v-69e9213a><span class="bg-warning text-danger p-1 rounded" data-v-69e9213a> recipient: &quot;Mayor Snibblysmith&quot;,</span><em class="ms-1 text-warning" data-v-69e9213a>this matches the property in our filter object!</em><br data-v-69e9213a> trackingNumber : &quot;WVR-XK4-r&quot;,<br data-v-69e9213a> fragile : true,<br data-v-69e9213a> shippingTier : &quot;INTERPLANETARY/DOMESTIC&quot;,<br data-v-69e9213a> shippingCost : 25,<br data-v-69e9213a> currency : &quot;Union&quot;,<br data-v-69e9213a> insured : true,<br data-v-69e9213a> sector: &quot;X85&quot;,<br data-v-69e9213a> ... <em data-v-69e9213a>properties continue</em><br data-v-69e9213a> } </div></div></div><div class="col-11 mt-2" data-v-69e9213a><p data-v-69e9213a> Because that object in the database had a match it would be returned. In the case that we were looking for one package, the database would return the <code data-v-69e9213a>first</code> one. In the case where we are looking for many, it would return <code data-v-69e9213a>all</code> data objects that contain this match. </p><h5 class="col-12 text-warning darken-40 text-start" data-v-69e9213a> Filtering by multiple properties </h5><p data-v-69e9213a> This <code data-v-69e9213a>filter object</code> can have many properties on it and each <kbd data-v-69e9213a>key value</kbd> pair will <em data-v-69e9213a>have</em> to match on the data objects in the database. <em data-v-69e9213a>(see fig. b)</em></p><em class="text-warning darken-40" data-v-69e9213a>figure b.</em><div class="row border border-secondary rounded p-2" data-v-69e9213a><p class="col-12" data-v-69e9213a> Note that this <code data-v-69e9213a>filter object</code> has 2 properties it&#39;s filtering by, <code data-v-69e9213a>recipient</code> and <code data-v-69e9213a>sector</code>. In this example only the <b data-v-69e9213a>second</b> object will be included when returned. <code data-v-69e9213a>BOTH</code> <kbd data-v-69e9213a>key value</kbd> pairs in the <code data-v-69e9213a>filter object</code> have to match. </p><em class="col-11 text-danger lighten-10" data-v-69e9213a>filter object</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> const query = { recipient: &quot;Mayor Snibblysmith&quot;, sector: &quot;X85&quot; } </div><em class="col-11 text-danger lighten-10 mt-2" data-v-69e9213a>shipments in database</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> [{<br data-v-69e9213a> recipient: &quot;Madam Blackwell&quot;,<br data-v-69e9213a> trackingNumber : &quot;WVR-XK4-r&quot;,<br data-v-69e9213a> fragile : true,<br data-v-69e9213a> shippingTier : &quot;INTERPLANETARY/DOMESTIC&quot;,<br data-v-69e9213a> shippingCost : 25,<br data-v-69e9213a> currency : &quot;Union&quot;,<br data-v-69e9213a> insured : true,<br data-v-69e9213a><span class="bg-warning text-danger p-1 rounded" data-v-69e9213a> sector: &quot;X85&quot;,</span><em class="ms-1 text-warning" data-v-69e9213a>this property matches, but is the only one on this data object.</em><br data-v-69e9213a> ... <em data-v-69e9213a>properties continue</em><br data-v-69e9213a> }, <br data-v-69e9213a> {<br data-v-69e9213a><span class="bg-warning text-danger p-1 rounded" data-v-69e9213a> recipient: &quot;Mayor Snibblysmith&quot;,</span><em class="ms-1 text-warning" data-v-69e9213a>this matches <abbr title="" data-v-69e9213a></abbr> property in our filter object!</em><br data-v-69e9213a> trackingNumber : &quot;XBA-YT6-l&quot;,<br data-v-69e9213a> fragile : false,<br data-v-69e9213a> shippingTier : &quot;WARP+&quot;,<br data-v-69e9213a> shippingCost : 75,<br data-v-69e9213a> currency : &quot;Union&quot;,<br data-v-69e9213a> insured : true,<br data-v-69e9213a><span class="bg-warning text-danger p-1 rounded" data-v-69e9213a> sector: &quot;X85&quot;,</span><em class="ms-1 text-warning" data-v-69e9213a>this also matches a property in our filter object!</em><br data-v-69e9213a> ... <em data-v-69e9213a>properties continue</em><br data-v-69e9213a> }] </div></div></div><div class="col-11 mt-2" data-v-69e9213a><p data-v-69e9213a> Because only the second data object had matches for both properties in the passed <code data-v-69e9213a>filter object</code>, it will be the only one returned. In the case of trying to find one data object, the more properties included in the data object the more <code data-v-69e9213a>accurate</code> we can be when trying to find. In the case of trying to find many, we can refine our search down to only include results that have both. </p><h5 class="col-12 text-warning darken-40 text-start" data-v-69e9213a> Filtering by multiple values </h5><p data-v-69e9213a> Sometimes this is the opposite of what we want. Sometimes we want to pass multiple values for one key to open our search results to be more inclusive. This too can be done but starts to get more complicated. </p><p data-v-69e9213a> There are a couple ways to achieve a <code data-v-69e9213a>filter object</code> that is more inclusive with it&#39;s results. Take a look at this next example. <em data-v-69e9213a>(fig. c)</em></p><em class="text-warning darken-40" data-v-69e9213a>figure c.</em><div class="row border border-secondary rounded p-2" data-v-69e9213a><p class="col-12" data-v-69e9213a> The <code data-v-69e9213a>filter object</code> this time contains an array of <em data-v-69e9213a>possible</em> <kbd data-v-69e9213a>values</kbd> for the <kbd data-v-69e9213a>key</kbd><code data-v-69e9213a>recipient</code>. In this case it will return <em data-v-69e9213a>any</em> packages with either <code data-v-69e9213a>Mayor Snibblysmith</code><em data-v-69e9213a>or </em> <code data-v-69e9213a>Madam Blackwell</code> as the <code data-v-69e9213a>recipient</code>. </p><em class="col-11 text-danger lighten-10" data-v-69e9213a>filter object</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> const query = { recipient: [&quot;Mayor Snibblysmith&quot;, &quot;Madam Blackwell&quot;] } </div><em class="col-11 text-danger lighten-10 mt-2" data-v-69e9213a>shipments in database</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> [{<br data-v-69e9213a><span class="bg-warning text-danger p-1 rounded" data-v-69e9213a> recipient: &quot;Madam Blackwell&quot;,</span><em class="ms-1 text-warning" data-v-69e9213a>this matches one of the values in our filter object array!</em><br data-v-69e9213a> trackingNumber : &quot;WVR-XK4-r&quot;,<br data-v-69e9213a> fragile : true,<br data-v-69e9213a> shippingTier : &quot;INTERPLANETARY/DOMESTIC&quot;,<br data-v-69e9213a> shippingCost : 25,<br data-v-69e9213a> currency : &quot;Union&quot;,<br data-v-69e9213a> insured : true,<br data-v-69e9213a> sector: &quot;X85&quot;,<br data-v-69e9213a> ... <em data-v-69e9213a>properties continue</em><br data-v-69e9213a> }, <br data-v-69e9213a> {<br data-v-69e9213a><span class="bg-warning text-danger p-1 rounded" data-v-69e9213a> recipient: &quot;Mayor Snibblysmith&quot;,</span><em class="ms-1 text-warning" data-v-69e9213a>this matches one of the values in our filter object array!</em><br data-v-69e9213a> trackingNumber : &quot;XBA-YT6-l&quot;,<br data-v-69e9213a> fragile : false,<br data-v-69e9213a> shippingTier : &quot;WARP+&quot;,<br data-v-69e9213a> shippingCost : 75,<br data-v-69e9213a> currency : &quot;Union&quot;,<br data-v-69e9213a> insured : true,<br data-v-69e9213a> sector: &quot;X85&quot;,<br data-v-69e9213a> ... <em data-v-69e9213a>properties continue</em><br data-v-69e9213a> }] </div></div><p data-v-69e9213a> In the case above, both data objects would be returned. Since they both match at least <em data-v-69e9213a>one</em> of the values passed in the <code data-v-69e9213a>recipient</code> array. </p><h5 class="col-12 text-warning darken-40 text-start" data-v-69e9213a> Filtering using $or </h5><p data-v-69e9213a> Now this works fine if we are looking for shipments by expanding our scope for <code data-v-69e9213a>recipients</code>, but what if we wanted to find include multiple data objects based off of different properties? </p><p data-v-69e9213a> This time we will start to use <b class="text-primary" data-v-69e9213a>Mongo Operators</b>. These are identifiable by the <kbd data-v-69e9213a>$</kbd> before the operator. While these can complicate our <code data-v-69e9213a>filter objects</code> further still. They allow us to use more logical conditions within our <code data-v-69e9213a>filter object</code>. </p><em class="text-warning darken-40" data-v-69e9213a>figure d.</em><div class="row border border-secondary rounded p-2" data-v-69e9213a><p class="col-12" data-v-69e9213a> Note the <kbd data-v-69e9213a>$or</kbd> operator used this time. The formatting of this object is very specific. </p><em class="col-11 text-danger lighten-10" data-v-69e9213a>filter object</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> const query = {$or: [{ recipient:&quot;Mayor Snibblysmith&quot; }, {sector: &quot;X85&quot;}]} </div><em class="col-11 text-danger lighten-10 mt-2" data-v-69e9213a>shipments in database</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> [{<br data-v-69e9213a> recipient: &quot;Madam Blackwell&quot;,<br data-v-69e9213a> trackingNumber : &quot;WVR-XK4-r&quot;,<br data-v-69e9213a> fragile : true,<br data-v-69e9213a> shippingTier : &quot;INTERPLANETARY/DOMESTIC&quot;,<br data-v-69e9213a> shippingCost : 25,<br data-v-69e9213a> currency : &quot;Union&quot;,<br data-v-69e9213a> insured : true,<br data-v-69e9213a><span class="bg-warning text-danger p-1 rounded" data-v-69e9213a> sector: &quot;X85&quot;, </span><em class="ms-1 text-warning" data-v-69e9213a>this matches the sector filter of the $or!</em><br data-v-69e9213a> ... <em data-v-69e9213a>properties continue</em><br data-v-69e9213a> }, <br data-v-69e9213a> {<br data-v-69e9213a><span class="bg-warning text-danger p-1 rounded" data-v-69e9213a> recipient: &quot;Mayor Snibblysmith&quot;,</span><em class="ms-1 text-warning" data-v-69e9213a>this matches the recipient filter of the $or!</em><br data-v-69e9213a> trackingNumber : &quot;XBA-YT6-l&quot;,<br data-v-69e9213a> fragile : false,<br data-v-69e9213a> shippingTier : &quot;WARP+&quot;,<br data-v-69e9213a> shippingCost : 75,<br data-v-69e9213a> currency : &quot;Union&quot;,<br data-v-69e9213a> insured : true,<br data-v-69e9213a> sector: &quot;Z67&quot;,<br data-v-69e9213a> ... <em data-v-69e9213a>properties continue</em><br data-v-69e9213a> }] </div></div><p data-v-69e9213a> Once again, in the case above both of these objects would be returned since they both have at least one match with one of the <kbd data-v-69e9213a>$or</kbd> conditions. </p><h5 class="col-12 text-warning darken-40 text-start" data-v-69e9213a> Fuzzy String Searching using $regex </h5><p data-v-69e9213a> While there are a lot of <b class="text-primary" data-v-69e9213a>Mongo Operators</b> that can be used, we will go over just one more, the <kbd data-v-69e9213a>$regex</kbd> operator. The most notable function of the <kbd data-v-69e9213a>$regex</kbd> operator allows us to search partial strings, and return matches based upon that partial string. see <em data-v-69e9213a>(fig. e)</em></p><em class="text-warning darken-40" data-v-69e9213a>figure e.</em><div class="row border border-secondary rounded p-2" data-v-69e9213a><p class="col-12" data-v-69e9213a> We might not have the full name of the shipment recipient( or any other string value for that matter). Normally this is a problem cause it will look for an exact match. With this <code data-v-69e9213a>filter object</code> it that is no longer the case. </p><em class="col-11 text-danger lighten-10" data-v-69e9213a>filter object</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> const query = {recipient: { $regex: /Snibblysmith/g }} </div><em class="col-11 text-danger lighten-10 mt-2" data-v-69e9213a>shipment in database</em><div class="col-12 bg-dark lighten-10 border-fig rounded text-info" data-v-69e9213a> {<br data-v-69e9213a> recipient: &quot;Mayor <span class="bg-warning text-danger p-1 rounded" data-v-69e9213a>Snibblysmith&quot;,</span><em class="ms-1 text-warning" data-v-69e9213a>the Snibblysmith part of the string matches!</em><br data-v-69e9213a> trackingNumber : &quot;WVR-XK4-r&quot;,<br data-v-69e9213a> fragile : true,<br data-v-69e9213a> shippingTier : &quot;INTERPLANETARY/DOMESTIC&quot;,<br data-v-69e9213a> shippingCost : 25,<br data-v-69e9213a> currency : &quot;Union&quot;,<br data-v-69e9213a> insured : true,<br data-v-69e9213a> sector: &quot;X85&quot;,<br data-v-69e9213a> ... <em data-v-69e9213a>properties continue</em><br data-v-69e9213a> } </div></div><p data-v-69e9213a> In the above case, even though there wasn&#39;t a full string match, just matching the <code data-v-69e9213a>Snibblysmith</code> part was enough, and will include this shipment in the return. Note that if there were more <kbd data-v-69e9213a>recipients</kbd> that included the string <code data-v-69e9213a>Snibblysmith</code> they too would be returned. </p><p data-v-69e9213a> Check out the links for more in depth examples of Mongo Projection Operators and more regex. </p><a target="_blank" href="https://docs.mongodb.com/manual/reference/operator/query/" data-v-69e9213a>Mongo Query and Projection Operators</a><a target="_blank" href="https://codeworksacademy.com/fs-student-guide/resources/wk2/04-Regex/" data-v-69e9213a>Codeworks acedemy Regex</a></div>',7),c=[s];function l(e,v,b,u,h,p){return r(),o("div",n,c)}var f=a(i,[["render",l],["__scopeId","data-v-69e9213a"]]);export{f as default};
